==3324== Memcheck, a memory error detector
==3324== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3324== Using Valgrind-3.13.0 and LibVEX; rerun with -h for copyright info
==3324== Command: node test/test.js
==3324== Parent PID: 6
==3324== 
==3324== error calling PR_SET_PTRACER, vgdb might block
==3324== Use of uninitialised value of size 8
==3324==    at 0x12EE5F9: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F2C23: ??? (in /usr/bin/node)
==3324==    by 0x12F021C: ??? (in /usr/bin/node)
==3324==    by 0x12EFFF7: ??? (in /usr/bin/node)
==3324==    by 0xC7961F: v8::internal::(anonymous namespace)::Invoke(v8::internal::Isolate*, v8::internal::(anonymous namespace)::InvokeParams const&) (in /usr/bin/node)
==3324==    by 0xC79AD7: v8::internal::Execution::Call(v8::internal::Isolate*, v8::internal::Handle<v8::internal::Object>, v8::internal::Handle<v8::internal::Object>, int, v8::internal::Handle<v8::internal::Object>*) (in /usr/bin/node)
==3324==    by 0xB49AAA: v8::Function::Call(v8::Local<v8::Context>, v8::Local<v8::Value>, int, v8::Local<v8::Value>*) (in /usr/bin/node)
==3324== 
--3324-- WARNING: unhandled amd64-linux syscall: 332
--3324-- You may be able to write your own handler.
--3324-- Read the file README_MISSING_SYSCALL_OR_IOCTL.
--3324-- Nevertheless we consider this a bug.  Please report
--3324-- it at http://valgrind.org/support/bug_reports.html.
==3324== Invalid write of size 8
==3324==    at 0x97BC0D8: Napi::details::ThreadSafeFinalize<void, Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*)::{lambda(Napi::Env, void*)#1}, void>::FinalizeWrapperWithContext(napi_env__*, void*, void*) (napi-inl.h:174)
==3324==    by 0x9AC8D4: void node::Environment::CloseHandle<uv_handle_s, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1}>(uv_handle_s*, v8impl::(anonymous namespace)::ThreadSafeFunction::CloseHandlesAndMaybeDelete(bool)::{lambda(uv_handle_s*)#1}::operator()(uv_handle_s*) const::{lambda(uv_handle_s*)#1})::{lambda(uv_handle_s*)#1}::_FUN(uv_handle_s*) (in /usr/bin/node)
==3324==    by 0x12D4D1C: uv__finish_close (core.c:291)
==3324==    by 0x12D4D1C: uv__run_closing_handles (core.c:305)
==3324==    by 0x12D4D1C: uv_run (core.c:375)
==3324==    by 0xA1AFA6: node::NodeMainInstance::Run() (in /usr/bin/node)
==3324==    by 0x9AB297: node::Start(int, char**) (in /usr/bin/node)
==3324==    by 0x5BBFB96: (below main) (libc-start.c:310)
==3324==  Address 0x9a41740 is 0 bytes inside a block of size 8 free'd
==3324==    at 0x4C3123B: operator delete(void*) (vg_replace_malloc.c:576)
==3324==    by 0x97BBB6C: std::default_delete<napi_threadsafe_function__*>::operator()(napi_threadsafe_function__**) const (unique_ptr.h:78)
==3324==    by 0x97BB7D6: std::unique_ptr<napi_threadsafe_function__*, std::default_delete<napi_threadsafe_function__*> >::~unique_ptr() (unique_ptr.h:268)
==3324==    by 0x97BB763: Napi::ThreadSafeFunction::~ThreadSafeFunction() (napi.h:1834)
==3324==    by 0x97BAA8F: CBarActivityReceiver::~CBarActivityReceiver() (bar_activity_receiver.cpp:9)
==3324==    by 0x97BA73C: void __gnu_cxx::new_allocator<CBarActivityReceiver>::destroy<CBarActivityReceiver>(CBarActivityReceiver*) (new_allocator.h:140)
==3324==    by 0x97BA708: void std::allocator_traits<std::allocator<CBarActivityReceiver> >::destroy<CBarActivityReceiver>(std::allocator<CBarActivityReceiver>&, CBarActivityReceiver*) (alloc_traits.h:487)
==3324==    by 0x97BA5F2: std::_Sp_counted_ptr_inplace<CBarActivityReceiver, std::allocator<CBarActivityReceiver>, (__gnu_cxx::_Lock_policy)2>::_M_dispose() (shared_ptr_base.h:535)
==3324==    by 0x9A5B85: std::_Sp_counted_base<(__gnu_cxx::_Lock_policy)2>::_M_release() (in /usr/bin/node)
==3324==    by 0x97B50D0: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::~__shared_count() (shared_ptr_base.h:684)
==3324==    by 0x97B3F8D: std::__shared_ptr<CBarActivityReceiver, (__gnu_cxx::_Lock_policy)2>::~__shared_ptr() (shared_ptr_base.h:1123)
==3324==    by 0x97B402F: std::shared_ptr<CBarActivityReceiver>::~shared_ptr() (shared_ptr.h:93)
==3324==  Block was alloc'd at
==3324==    at 0x4C3017F: operator new(unsigned long) (vg_replace_malloc.c:334)
==3324==    by 0x97BB4EC: Napi::ThreadSafeFunction::ThreadSafeFunction() (napi-inl.h:3922)
==3324==    by 0x97BC171: Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void, Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*)::{lambda(Napi::Env, void*)#1}, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*, Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*)::{lambda(Napi::Env, void*)#1}, void*, void (*)(napi_env__*, void*, void*)) (napi-inl.h:4021)
==3324==    by 0x97BBFA9: Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void, Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*)::{lambda(Napi::Env, void*)#1}>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*, Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*)::{lambda(Napi::Env, void*)#1}) (napi-inl.h:3900)
==3324==    by 0x97BBE42: Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*, void>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long, void*) (napi-inl.h:3850)
==3324==    by 0x97BBCC5: Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*>(napi_env__*, Napi::Function const&, Napi::Object const&, char const*, unsigned long, unsigned long) (napi-inl.h:3836)
==3324==    by 0x97BB983: Napi::ThreadSafeFunction Napi::ThreadSafeFunction::New<char const*>(napi_env__*, Napi::Function const&, char const*, unsigned long, unsigned long) (napi-inl.h:3758)
==3324==    by 0x97BA9BB: CBarActivityReceiver::CBarActivityReceiver(std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&) (bar_activity_receiver.cpp:6)
==3324==    by 0x97BA38B: void __gnu_cxx::new_allocator<CBarActivityReceiver>::construct<CBarActivityReceiver, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&>(CBarActivityReceiver*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&) (new_allocator.h:136)
==3324==    by 0x97BA105: void std::allocator_traits<std::allocator<CBarActivityReceiver> >::construct<CBarActivityReceiver, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&>(std::allocator<CBarActivityReceiver>&, CBarActivityReceiver*, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&) (alloc_traits.h:475)
==3324==    by 0x97B9CB8: std::_Sp_counted_ptr_inplace<CBarActivityReceiver, std::allocator<CBarActivityReceiver>, (__gnu_cxx::_Lock_policy)2>::_Sp_counted_ptr_inplace<std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&>(std::allocator<CBarActivityReceiver>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&) (shared_ptr_base.h:526)
==3324==    by 0x97B97C8: std::__shared_count<(__gnu_cxx::_Lock_policy)2>::__shared_count<CBarActivityReceiver, std::allocator<CBarActivityReceiver>, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&>(std::_Sp_make_shared_tag, CBarActivityReceiver*, std::allocator<CBarActivityReceiver> const&, std::__cxx11::basic_string<char, std::char_traits<char>, std::allocator<char> > const&, Napi::Env&, Napi::Function&) (shared_ptr_base.h:637)
==3324== 
==3324== 
==3324== Process terminating with default action of signal 2 (SIGINT)
==3324==    at 0x5CBF9EE: epoll_pwait (epoll_pwait.c:42)
==3324==    by 0x12E652E: uv__io_poll (linux-core.c:284)
==3324==    by 0x12D4C5A: uv_run (core.c:373)
==3324==    by 0xA1AFA6: node::NodeMainInstance::Run() (in /usr/bin/node)
==3324==    by 0x9AB297: node::Start(int, char**) (in /usr/bin/node)
==3324==    by 0x5BBFB96: (below main) (libc-start.c:310)
==3324== 
==3324== HEAP SUMMARY:
==3324==     in use at exit: 1,277,296 bytes in 5,448 blocks
==3324==   total heap usage: 17,648 allocs, 12,200 frees, 17,367,888 bytes allocated
==3324== 
==3324== LEAK SUMMARY:
==3324==    definitely lost: 4,224 bytes in 4 blocks
==3324==    indirectly lost: 320 bytes in 5 blocks
==3324==      possibly lost: 1,932 bytes in 8 blocks
==3324==    still reachable: 1,270,820 bytes in 5,431 blocks
==3324==                       of which reachable via heuristic:
==3324==                         stdstring          : 33,728 bytes in 699 blocks
==3324==                         newarray           : 2,744 bytes in 7 blocks
==3324==         suppressed: 0 bytes in 0 blocks
==3324== Rerun with --leak-check=full to see details of leaked memory
==3324== 
==3324== For counts of detected and suppressed errors, rerun with: -v
==3324== Use --track-origins=yes to see where uninitialised values come from
==3324== ERROR SUMMARY: 41 errors from 2 contexts (suppressed: 0 from 0)
